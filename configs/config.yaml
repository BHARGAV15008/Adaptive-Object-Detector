# Advanced Object Detection System Configuration
# ==============================================

# Application Configuration
app:
  name: "Advanced Object Detection System"
  version: "2.0.0"
  description: "AI-Powered Real-time Object Detection with Advanced Analytics"
  environment: "development"  # development, staging, production
  debug: true
  host: "0.0.0.0"
  port: 8000
  workers: 4

# Model Configuration
models:
  default_model: "yolov8n"
  available_models:
    yolov8n:
      type: "yolo"
      version: "v8"
      size: "nano"
      path: "yolov8n.pt"
      inference_size: [640, 640]
      confidence_threshold: 0.25
      iou_threshold: 0.45
    yolov8s:
      type: "yolo"
      version: "v8"
      size: "small"
      path: "yolov8s.pt"
      inference_size: [640, 640]
      confidence_threshold: 0.25
      iou_threshold: 0.45
    yolov8m:
      type: "yolo"
      version: "v8"
      size: "medium"
      path: "yolov8m.pt"
      inference_size: [640, 640]
      confidence_threshold: 0.25
      iou_threshold: 0.45
    yolov9c:
      type: "yolo"
      version: "v9"
      size: "compact"
      path: "yolov9c.pt"
      inference_size: [640, 640]
      confidence_threshold: 0.25
      iou_threshold: 0.45
    rtdetr-l:
      type: "rt-detr"
      size: "large"
      path: "rtdetr-l.pt"
      inference_size: [640, 640]
      confidence_threshold: 0.25
  
  # Model Training Configuration
  training:
    epochs: 100
    batch_size: 16
    learning_rate: 0.01
    optimizer: "SGD"
    patience: 50
    save_period: 10
    device: "auto"  # auto, cpu, cuda, mps

# Computer Vision Features
cv_features:
  object_detection:
    enabled: true
    multi_model_inference: true
    model_ensemble: true
  
  object_tracking:
    enabled: true
    tracker_type: "ByteTrack"  # ByteTrack, DeepSORT, StrongSORT
    max_disappeared: 30
    max_distance: 50
  
  pose_estimation:
    enabled: true
    model: "yolov8n-pose.pt"
    keypoint_threshold: 0.5
  
  semantic_segmentation:
    enabled: true
    model: "yolov8n-seg.pt"
  
  depth_estimation:
    enabled: false
    model: "midas"
  
  face_recognition:
    enabled: true
    model: "facenet"
    embedding_size: 512

# Database Configuration
database:
  type: "postgresql"  # postgresql, sqlite, mongodb
  host: "localhost"
  port: 5432
  name: "object_detection_db"
  username: "postgres"
  password: "${DB_PASSWORD}"
  pool_size: 10
  max_overflow: 20
  
  # SQLite fallback
  sqlite:
    path: "data/database.db"
  
  # Redis for caching
  redis:
    host: "localhost"
    port: 6379
    db: 0
    password: "${REDIS_PASSWORD}"

# Storage Configuration
storage:
  type: "local"  # local, s3, gcs, azure
  local:
    base_path: "data"
    models_path: "data/models"
    datasets_path: "data/datasets"
    annotations_path: "data/annotations"
    logs_path: "data/logs"
  
  s3:
    bucket: "${S3_BUCKET}"
    region: "${S3_REGION}"
    access_key: "${S3_ACCESS_KEY}"
    secret_key: "${S3_SECRET_KEY}"

# API Configuration
api:
  version: "v2"
  title: "Advanced Object Detection API"
  description: "Real-time object detection with AI-powered features"
  cors:
    enabled: true
    origins: ["*"]
    methods: ["GET", "POST", "PUT", "DELETE"]
    headers: ["*"]
  
  rate_limiting:
    enabled: true
    requests_per_minute: 100
    requests_per_hour: 1000
  
  authentication:
    enabled: true
    jwt_secret: "${JWT_SECRET}"
    jwt_algorithm: "HS256"
    jwt_expiration: 86400  # 24 hours
  
  websocket:
    enabled: true
    heartbeat_interval: 30

# Monitoring and Analytics
monitoring:
  enabled: true
  metrics:
    enabled: true
    endpoint: "/metrics"
    
  logging:
    level: "INFO"  # DEBUG, INFO, WARNING, ERROR, CRITICAL
    format: "json"
    file_rotation: true
    max_file_size: "100MB"
    backup_count: 5
  
  performance:
    fps_monitoring: true
    memory_monitoring: true
    gpu_monitoring: true
    latency_tracking: true
  
  alerts:
    enabled: true
    email_notifications: false
    slack_webhook: "${SLACK_WEBHOOK}"
    alert_thresholds:
      high_memory_usage: 85
      low_fps: 15
      high_latency: 200  # milliseconds

# Machine Learning Pipeline
ml_pipeline:
  active_learning:
    enabled: true
    uncertainty_threshold: 0.7
    annotation_budget: 1000
    sampling_strategy: "uncertainty"
  
  auto_annotation:
    enabled: true
    confidence_threshold: 0.9
    human_review_threshold: 0.7
  
  model_validation:
    enabled: true
    validation_split: 0.2
    cross_validation_folds: 5
    metrics: ["mAP", "precision", "recall", "F1"]
  
  continuous_learning:
    enabled: false
    retrain_interval: "weekly"
    min_new_samples: 100
    performance_threshold: 0.05

# Data Processing
data:
  preprocessing:
    resize_images: true
    target_size: [640, 640]
    normalize: true
    augmentation:
      enabled: true
      rotation_range: 15
      zoom_range: 0.1
      horizontal_flip: true
      brightness_range: [0.8, 1.2]
  
  annotation:
    formats: ["YOLO", "COCO", "Pascal VOC"]
    default_format: "YOLO"
    auto_save: true
    backup_frequency: "hourly"

# Security Configuration
security:
  api_keys:
    enabled: true
    header_name: "X-API-Key"
  
  rate_limiting:
    enabled: true
    storage: "redis"  # redis, memory
  
  input_validation:
    max_image_size: "50MB"
    allowed_formats: ["jpg", "jpeg", "png", "bmp", "tiff"]
    sanitize_filenames: true
  
  cors:
    allowed_origins: ["http://localhost:3000", "https://your-domain.com"]
    allow_credentials: true

# Hardware Configuration
hardware:
  gpu:
    enabled: true
    device_ids: [0]  # GPU device IDs to use
    memory_fraction: 0.8
  
  cpu:
    num_workers: 4
    inference_threads: 2
  
  camera:
    default_source: 0
    resolution: [1920, 1080]
    fps: 30
    buffer_size: 1

# Development Tools
development:
  hot_reload: true
  debug_mode: true
  profiling: false
  swagger_ui: true
  
  testing:
    unit_tests: true
    integration_tests: true
    performance_tests: false
    coverage_threshold: 80

# Deployment Configuration
deployment:
  docker:
    enabled: true
    base_image: "python:3.11-slim"
    gpu_support: true
  
  kubernetes:
    enabled: false
    replicas: 3
    resources:
      requests:
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "2000m"
        memory: "4Gi"
  
  cloud:
    provider: "aws"  # aws, gcp, azure
    region: "us-west-2"
    auto_scaling: true

# Feature Flags
features:
  experimental_models: false
  beta_features: true
  telemetry: true
  crash_reporting: true
