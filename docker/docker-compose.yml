version: '3.8'

services:
  # Main application
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: object-detection-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DB_PASSWORD=${DB_PASSWORD:-defaultpass}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - SLACK_WEBHOOK=${SLACK_WEBHOOK:-}
    volumes:
      - app_data:/app/data
      - model_cache:/app/models
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - object_detection_network
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: object-detection-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=object_detection_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD:-defaultpass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - object_detection_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: object-detection-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - object_detection_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: object-detection-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - frontend_build:/usr/share/nginx/html/static
    depends_on:
      - app
    networks:
      - object_detection_network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: object-detection-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - object_detection_network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: object-detection-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - object_detection_network

  # Model serving for GPU inference
  triton:
    image: nvcr.io/nvidia/tritonserver:23.08-py3
    container_name: object-detection-triton
    restart: unless-stopped
    ports:
      - "8001:8001"  # HTTP
      - "8002:8002"  # GRPC
    volumes:
      - model_repository:/models
    command: tritonserver --model-repository=/models
    networks:
      - object_detection_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local
  model_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  model_repository:
    driver: local
  frontend_build:
    driver: local

networks:
  object_detection_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
