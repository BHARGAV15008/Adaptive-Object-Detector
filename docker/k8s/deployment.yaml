apiVersion: apps/v1
kind: Deployment
metadata:
  name: object-detection-app
  namespace: object-detection
  labels:
    app: object-detection
    component: api
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: object-detection
      component: api
  template:
    metadata:
      labels:
        app: object-detection
        component: api
    spec:
      containers:
      - name: object-detection-app
        image: object-detection:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: jwt-secret
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "2000m"
            memory: "4Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: app-data
          mountPath: /app/data
        - name: model-cache
          mountPath: /app/models
        - name: config-volume
          mountPath: /app/configs
          readOnly: true
      volumes:
      - name: app-data
        persistentVolumeClaim:
          claimName: app-data-pvc
      - name: model-cache
        persistentVolumeClaim:
          claimName: model-cache-pvc
      - name: config-volume
        configMap:
          name: app-config
      nodeSelector:
        node-type: gpu
      tolerations:
      - key: "gpu"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: object-detection-service
  namespace: object-detection
  labels:
    app: object-detection
    component: api
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: object-detection
    component: api

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: object-detection-ingress
  namespace: object-detection
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/websocket-services: "object-detection-service"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.objectdetection.com
    secretName: object-detection-tls
  rules:
  - host: api.objectdetection.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: object-detection-service
            port:
              number: 8000

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app-data-pvc
  namespace: object-detection
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: model-cache-pvc
  namespace: object-detection
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: object-detection
data:
  config.yaml: |
    app:
      name: "Advanced Object Detection System"
      version: "2.0.0"
      environment: "production"
      debug: false
      host: "0.0.0.0"
      port: 8000
      workers: 4
    
    database:
      type: "postgresql"
      host: "postgres-service"
      port: 5432
      name: "object_detection_db"
      username: "postgres"
      pool_size: 20
      max_overflow: 50
    
    monitoring:
      enabled: true
      metrics:
        enabled: true
        endpoint: "/metrics"

---
apiVersion: v1
kind: Secret
metadata:
  name: database-secret
  namespace: object-detection
type: Opaque
data:
  password: ZGVmYXVsdHBhc3M=  # base64 encoded 'defaultpass'

---
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
  namespace: object-detection
type: Opaque
data:
  jwt-secret: eW91ci1qd3Qtc2VjcmV0  # base64 encoded 'your-jwt-secret'

---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: object-detection
type: Opaque
data:
  password: ""  # empty for no password
